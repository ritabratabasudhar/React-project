{"version":3,"sources":["LoginReg/Login.js","LoginReg/Register.js","LoginReg/LoginRegister.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","email","password","useStyles","form","width","backgroundColor","red","marginTop","grid","display","flexDirection","alignItems","onChangeHandling","e","setState","target","name","value","console","log","style","Container","component","maxWidth","Typography","variant","Grid","justifyContent","padding","container","spacing","items","TextField","autoComplete","fullWidth","label","autoFocus","onChange","Component","Register","fname","lname","ph_no","xs","sm","FormControlLabel","control","Checkbox","color","LoginRegister","isLoginTrue","onClickButtonchanging","this","Button","onClick","App","className","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f360e088.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {  Typography, TextField} from '@material-ui/core';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container'\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            email:'',\r\n            password:''\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const useStyles =\r\n        {\r\n            form: {\r\n                width: '100%', // Fix IE 11 issue.\r\n                backgroundColor: red,\r\n                marginTop: '20px',\r\n             },\r\n            grid: {\r\n                display: 'flex',\r\n                flexDirection:'column',\r\n                alignItems:'center',\r\n                marginTop: '10px',\r\n            }\r\n        }\r\n        const onChangeHandling=(e)=>{\r\n            this.setState({[e.target.name]:e.target.value},()=>console.log(this.state))\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <div style={useStyles.grid} >\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <Typography variant=\"h4\">Login</Typography>\r\n                    <form style={useStyles.form}>\r\n                        <Grid style={{justifyContent:'center',padding:'20px'}} container spacing={2}>\r\n                           \r\n                            <Grid items  style={useStyles.form} >\r\n                                <TextField autoComplete=\"email\" fullWidth name=\"email\" variant=\"outlined\" label=\"Email\" autoFocus onChange={onChangeHandling} />\r\n                            </Grid>\r\n                            \r\n                            <Grid items  style={useStyles.form} >\r\n                                <TextField autoComplete=\"password\" fullWidth name=\"password\" variant=\"outlined\" label=\"password\" onChange={onChangeHandling} />\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </form>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react';\r\nimport { Typography, TextField, FormControlLabel, Checkbox } from '@material-ui/core';\r\n\r\nimport { red } from '@material-ui/core/colors';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container'\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            fname:'',\r\n            lname:'',\r\n            email:'',\r\n            ph_no:'',\r\n            password:''\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const useStyles =\r\n        {\r\n            form: {\r\n                width: '100%', // Fix IE 11 issue.\r\n                backgroundColor: red,\r\n                marginTop: '20px',\r\n             },\r\n            grid: {\r\n                display: 'flex',\r\n                flexDirection:'column',\r\n                alignItems:'center',\r\n                marginTop: '10px',\r\n            }\r\n        }\r\n        const onChangeHandling=(e)=>{\r\n            this.setState({[e.target.name]:e.target.value},()=>console.log(this.state))\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <div style={useStyles.grid} >\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <Typography variant=\"h4\">Register</Typography>\r\n                    <form style={useStyles.form}>\r\n                        <Grid style={{justifyContent:'center',padding:'20px'}} container spacing={1}>\r\n                            <Grid items xs={12} sm={6} style={useStyles.form}>\r\n                                <TextField autoComplete=\"fname\" name=\"fname\" variant=\"outlined\" label=\"First Name\" autoFocus onChange={onChangeHandling}/>\r\n                            </Grid>\r\n                            <Grid items xs={12} sm={6} style={useStyles.form} >\r\n                                <TextField autoComplete=\"lname\" name=\"lname\" variant=\"outlined\" label=\"Last Name\" onChange={onChangeHandling} />\r\n                            </Grid>\r\n                            <Grid items sm={12} style={useStyles.form} >\r\n                                <TextField autoComplete=\"email\" fullWidth name=\"email\" variant=\"outlined\" label=\"Email\"  onChange={onChangeHandling}/>\r\n                            </Grid>\r\n                            <Grid items sm={12} style={useStyles.form} >\r\n                                <TextField autoComplete=\"pno\" fullWidth name=\"ph_no\" variant=\"outlined\" label=\"Phone Number\" onChange={onChangeHandling}  />\r\n                            </Grid>\r\n                            <Grid items sm={12} style={useStyles.form} >\r\n                                <TextField autoComplete=\"password\" fullWidth name=\"password\" variant=\"outlined\" label=\"password\" onChange={onChangeHandling}/>\r\n                            </Grid>\r\n                            <Grid>\r\n                                <FormControlLabel control={<Checkbox color=\"primary\"/>} label=\"i accept all the terms and agrements\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register\r\n","import React, { Component, Fragment } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\n\r\n\r\nclass LoginRegister extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isLoginTrue:true\r\n        }\r\n    }\r\n\r\n    render() {\r\n    const onClickButtonchanging=()=>{\r\n        //console.log('hello')\r\n        this.setState({isLoginTrue:!this.state.isLoginTrue})\r\n    }\r\n\r\n        return (\r\n            <Fragment>\r\n                {this.state.isLoginTrue===true?<div>\r\n                   <div><Login/></div> <br></br>\r\n                    <Button variant=\"contained\" color=\"primary\">Login</Button>  &nbsp;\r\n                <Button color=\"secondary\" onClick={onClickButtonchanging}>Don't have an account? Create it</Button></div>\r\n                :\r\n                <div>\r\n                    <div style={{justifyContent:'center'}}><Register/></div><br></br>\r\n                <Button variant=\"contained\" color=\"primary\">Register</Button> &nbsp;\r\n                <Button color=\"secondary\" onClick={onClickButtonchanging}>Already have an account? Sign it</Button>\r\n                </div>\r\n                }\r\n                \r\n                \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default LoginRegister","import React from 'react';\nimport './App.css';\n//import SignUp from './LoginReg/LoginRegister';\nimport LoginRegister from './LoginReg/LoginRegister';\n\nclass App extends React.Component{\n  render()\n{\n  return (\n    <div className=\"App\">\n        <div><LoginRegister/></div>\n\n      </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}